CREATE TABLE USERS (
    USERID NUMBER PRIMARY KEY,
    ROLE VARCHAR2(255) DEFAULT 'user',
    FULLNAME VARCHAR2(255) NOT NULL,
    EMAIL VARCHAR2(255) UNIQUE NOT NULL,
    PASSWORD VARCHAR2(255),
    PHONE_NUMBER CHAR(11) NOT NULL,
    ADDRESS VARCHAR2(255) NOT NULL
);

CREATE SEQUENCE USER_SEQ
START WITH 10000
INCREMENT BY 1;

CREATE OR REPLACE TRIGGER USERS_BIR BEFORE
    INSERT ON USERS FOR EACH ROW
BEGIN
    SELECT
        USER_SEQ.NEXTVAL INTO :NEW.USERID
    FROM
        DUAL;
END;

SELECT
    *
FROM
    USERS
WHERE
    USERID < 15
    AND ROLE != 'admin';
SELECT
    *
FROM
    USERS;
DELETE FROM USERS
WHERE
    USERID = 1;
UPDATE USERS
SET
    ROLE = 'admin'
WHERE
    USERID=10000;
 -----------------------------------------------------------
CREATE TABLE RESTAURANTS ( RESTAURANTID NUMBER PRIMARY KEY, EMAIL VARCHAR2(255) UNIQUE NOT NULL, PASSWORD VARCHAR2(255) NOT NULL, RESTAURANTNAME VARCHAR2(255) NOT NULL, ADDRESS VARCHAR2(255) NOT NULL, PHONE_NUMBER CHAR(11) NOT NULL, WEBSITE VARCHAR2(255) NOT NULL );
CREATE SEQUENCE RESTAURANT_SEQ START WITH 10000 INCREMENT BY 1;
CREATE OR REPLACE TRIGGER RESTAURANTS_BIR BEFORE INSERT ON RESTAURANTS FOR EACH ROW BEGIN
    SELECT
        RESTAURANT_SEQ.NEXTVAL INTO :NEW.RESTAURANTID
    FROM
        DUAL;
END;
SELECT
    *
FROM
    RESTAURANTS;
 -----------------------------------------------------------
CREATE TABLE RESTAURANTITEMS( PRODUCTID NUMBER PRIMARY KEY, RESTAURANTID NUMBER NOT NULL, NAME VARCHAR2(255) NOT NULL, DESCRIPTION VARCHAR2(255) NOT NULL, CATEGORY VARCHAR2(255) NOT NULL, PRICE NUMBER NOT NULL, FOREIGN KEY (RESTAURANTID) REFERENCES RESTAURANTS(RESTAURANTID) );
CREATE SEQUENCE RESTAURANT_ITEM_SEQ START WITH 100 INCREMENT BY 1;
CREATE OR REPLACE TRIGGER RESTAURANT_ITEMS_BIR BEFORE INSERT ON RESTAURANTITEMS FOR EACH ROW BEGIN
    SELECT
        RESTAURANT_ITEM_SEQ.NEXTVAL INTO :NEW.PRODUCTID
    FROM
        DUAL;
END;
 -----------------------------------------------------------
CREATE TABLE ORDERS( ORDERID NUMBER PRIMARY KEY, USERID NUMBER NOT NULL, RESTAURANTID NUMBER NOT NULL, ORDERTIMEDATE TIMESTAMP NOT NULL, ORDERSTATUS VARCHAR2(255) NOT NULL, GRANDTOTAL NUMBER(7, 2), FOREIGN KEY (USERID) REFERENCES USERS(USERID), FOREIGN KEY (RESTAURANTID) REFERENCES RESTAURANTS(RESTAURANTID) );
CREATE SEQUENCE ORDER_SEQ START WITH 1000 INCREMENT BY 1;
CREATE OR REPLACE TRIGGER ORDERS_BIR BEFORE INSERT ON ORDERS FOR EACH ROW BEGIN
    SELECT
        ORDER_SEQ.NEXTVAL INTO :NEW.ORDERID
    FROM
        DUAL;
END;
SELECT
    *
FROM
    ORDERS;
 -----------------------------------------------------------
CREATE TABLE ORDER_DETAILS( ORDERID NUMBER NOT NULL, PRODUCTID NUMBER NOT NULL, QUANTITY NUMBER NOT NULL, SUBTOTAL NUMBER(7, 2) NOT NULL, FOREIGN KEY (ORDERID) REFERENCES ORDERS(ORDERID), FOREIGN KEY (PRODUCTID) REFERENCES RESTAURANTITEMS(PRODUCTID), PRIMARY KEY (ORDERID, PRODUCTID) );
 -----------------------------------------------------------
CREATE TABLE RIDERS( RIDERID NUMBER PRIMARY KEY, ORDERID NUMBER, STATUS VARCHAR2(255) NOT NULL, NAME VARCHAR2(255) NOT NULL, PHONE_NUMBER CHAR(11) NOT NULL, FOREIGN KEY (ORDERID) REFERENCES ORDERS(ORDERID) );
CREATE SEQUENCE RIDER_SEQ START WITH 100 INCREMENT BY 1;
CREATE OR REPLACE TRIGGER RIDERS_BIR BEFORE INSERT ON RIDERS FOR EACH ROW BEGIN
    SELECT
        RIDER_SEQ.NEXTVAL INTO :NEW.RIDERID
    FROM
        DUAL;
END;
SELECT
    *
FROM
    ORDER_DETAILS;
DROP TABLE RIDERS;
DROP TABLE ORDER_DETAILS;
DROP TABLE ORDERS;
DROP TABLE RESTAURANTITEMS;
DROP TABLE RESTAURANTS;
DROP TABLE USERS;
DESC USERS;
DESC RESTAURANTS;
DESC RESTAURANTITEMS;
DESC ORDERS;
DESC ORDER_DETAILS;
SELECT
    *
FROM
    USERS;
DECLARE
    V_CURRSTATUS VARCHAR2(20);
BEGIN
    UPDATEORDERANDRIDERSTATUS(
        P_RESTAURANTID => 10000,
        P_ORDERID => 1001,
        P_CURRSTATUS => V_CURRSTATUS
    );
    DBMS_OUTPUT.PUT_LINE('Current Status: '
                         || V_CURRSTATUS);
END;

DECLARE
    V_CURRSTATUS VARCHAR2(20);
BEGIN
    UPDATEORDERANDRIDERSTATUS(
        P_RESTAURANTID => 10000,
        P_ORDERID => 1001,
        P_CURRSTATUS => V_CURRSTATUS
    );
    DBMS_OUTPUT.PUT_LINE('Current Status: '
                         || V_CURRSTATUS);
END;

CREATE OR REPLACE PROCEDURE UPDATEORDERANDRIDERSTATUS( P_RESTAURANTID IN NUMBER, P_ORDERID IN NUMBER, P_CURRSTATUS OUT VARCHAR2 ) AS V_RIDERID NUMBER;
BEGIN
    SELECT
        ORDERSTATUS INTO P_CURRSTATUS
    FROM
        ORDERS
    WHERE
        RESTAURANTID = P_RESTAURANTID
        AND ORDERID = P_ORDERID
        AND (ORDERSTATUS = 'Processing'
        OR ORDERSTATUS = 'In Progress');
    IF SQL%ROWCOUNT = 0 THEN
        P_CURRSTATUS := 'NOT FOUND';
        RETURN;
    END IF;

    IF P_CURRSTATUS = 'In Progress' THEN
        UPDATE RIDERS
        SET
            STATUS = 'AVAILABLE',
            ORDERID=NULL
        WHERE
            ORDERID = P_ORDERID;
        UPDATE ORDERS
        SET
            ORDERSTATUS = 'Delivered'
        WHERE
            RESTAURANTID = P_RESTAURANTID
            AND ORDERID = P_ORDERID;
        P_CURRSTATUS := 'Delivered';
    ELSIF P_CURRSTATUS = 'Processing' THEN
        SELECT
            RIDERID INTO V_RIDERID
        FROM
            RIDERS
        WHERE
            STATUS = 'AVAILABLE'
            AND ROWNUM = 1;
        UPDATE ORDERS
        SET
            ORDERSTATUS = 'In Progress'
        WHERE
            RESTAURANTID = P_RESTAURANTID
            AND ORDERID = P_ORDERID;
        P_CURRSTATUS := 'In Progress';
 -- Assign OrderID to the Rider and Update Rider Status to 'BUSY'
        UPDATE RIDERS
        SET
            ORDERID = P_ORDERID,
            STATUS = 'BUSY'
        WHERE
            RIDERID = V_RIDERID;
    END IF;

    COMMIT;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        P_CURRSTATUS := 'NO DATA FOUND';
    WHEN OTHERS THEN
        P_CURRSTATUS := 'ERROR';
        ROLLBACK;
END;

BEGIN
    SELECT
        PRICE
    FROM
        RESTAURANTITEMS
    WHERE
        PRODUCTID = 100;
END;

SELECT
    *
FROM
    ORDERS;
SELECT
    *
FROM
    RIDERS;
DECLARE
    V_CURRSTATUS VARCHAR2(20);
BEGIN
    UPDATEORDERANDRIDERSTATUS(
        P_RESTAURANTID => 10000,
        P_ORDERID => 1001,
        P_CURRSTATUS => V_CURRSTATUS
    );
    DBMS_OUTPUT.PUT_LINE('Current Status: '
                         || V_CURRSTATUS);
END;
UPDATE RIDERS
SET
    STATUS = 'AVAILABLE';